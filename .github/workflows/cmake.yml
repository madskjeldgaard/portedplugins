on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-18.04, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Install 7Zip (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: Install-Module 7Zip4PowerShell -Force -Verbose

    - name: Checkout supercollider
      uses: actions/checkout@v2
      with:
        repository: supercollider/supercollider
        path: ${{github.workspace}}/supercollider
        ref: main

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake (Unix)
      shell: bash
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}/supercollider -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/install

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{github.workspace}}\build
      run: cmake .. -DCMAKE_BUILD_TYPE='Release' -DSC_PATH=${{github.workspace}}\supercollider -DCMAKE_INSTALL_PREFIX=${{github.workspace}}\build\install

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      working-directory: ${{github.workspace}}/build
      shell: bash
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 4
      run: cmake --build . --config "Release" --target install

    - name: Build (Windows)
      working-directory: ${{github.workspace}}\build
      if: matrix.os == 'windows-latest'
      shell: pwsh
      env:
        CMAKE_BUILD_PARALLEL_LEVEL: 4
      run: cmake --build . --config "Release" --target install

      # Gather all files in a zip
    - name: Zip up build (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: zip -r "PortedPlugins-${{runner.os}}" "install/PortedPlugins"

    # Gather all files in a zip
    - name: Zip up build (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      working-directory: ${{github.workspace}}\build
      run: Compress-7Zip "install\PortedPlugins" -ArchiveFileName "PortedPlugins-${{runner.os}}.zip" -Format Zip

    # Changelog
    - name: Generate a changelog
      uses: orhun/git-cliff-action@v1
      id: git-cliff
      with:
        config: cliff.toml
        args: -vv --latest --strip header
      env:
        OUTPUT: CHANGELOG.md

    - name: Set the release body
      id: release
      shell: bash
      run: |
        r=$(cat ${{ steps.git-cliff.outputs.changelog }})
        r="${r//'%'/'%25'}"     # Multiline escape sequences for %
        r="${r//$'\n'/'%0A'}"   # Multiline escape sequences for '\n'
        r="${r//$'\r'/'%0D'}"   # Multiline escape sequences for '\r'
        echo "::set-output name=RELEASE_BODY::$r"

    # Upload
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/build/PortedPlugins-${{runner.os}}.zip
        asset_name: PortedPlugins-${{runner.os}}.zip
        prerelease: true
        body: ${{ steps.release.outputs.RELEASE_BODY }}
        tag: ${{ github.ref }}
