####################################################################################################
# CMakeLists file for Chen
# Generated by Mads Kjeldgaard
# 2021-02-19
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.5)
set(project_name "MKPlugins")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 14)

message(STATUS "Cmake build type: " ${CMAKE_BUILD_TYPE})


# The Ubuntu 18 box in the Github Cloud complained " /usr/bin/ld: DaisySP/libDaisySP.a(KarplusString.cpp.o): relocation R_X86_64_PC32 against symbol `_ZN7daisysp6String15ProcessInternalILNS0_18StringNonLinearityE1EEEff' can not be used when making a shared object; recompile with -fPIC" for a while. This seems to fix it:
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpic")

# Set compiler pickyness, this picks up a ton of extra little things
if(CMAKE_COMPILER_IS_GNUCXX)
  add_compile_options(-Wall -Wextra -pedantic)
endif(CMAKE_COMPILER_IS_GNUCXX)

####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
  message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
  message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(
  SC_PATH "${SC_PATH}" CACHE PATH
  "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE
)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
  message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
  set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/DaisySP/Source/Dynamics)

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" ON)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

####################################################################################################
# include libraries

if(NOVA_SIMD)
  add_definitions(-DNOVA_SIMD)
  include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

####################################################################################################
# Plugins
####################################################################################################

# Install additional help files
install(
  DIRECTORY "plugins/HelpSource"
  DESTINATION "${project_name}/HelpSource"
)

# LPG
set(
  LPG_cpp_files
  plugins/LPG/LPG.cpp
  plugins/LPG/LPG.hpp
)

set(
  LPG_sc_files
  plugins/LPG/LPG.sc
)

set(
  LPG_schelp_files
  plugins/LPG/LPG.schelp
)

sc_add_server_plugin(
  "${project_name}" # desination directory
  "LPG" # target name
  "${LPG_cpp_files}"
  "${LPG_sc_files}"
  "${LPG_schelp_files}"
)

# Chen
set(
  Chen_cpp_files
  plugins/Chen/Chen.cpp
  plugins/Chen/Chen.hpp
)
set(
  Chen_sc_files
  plugins/Chen/Chen.sc
)
set(
  Chen_schelp_files
  plugins/Chen/Chen.schelp
)

sc_add_server_plugin(
  "${project_name}" # desination directory
  "Chen" # target name
  "${Chen_cpp_files}"
  "${Chen_sc_files}"
  "${Chen_schelp_files}"
)

####################################################################################################
# DAISYSP LIBRARY
####################################################################################################

# DaisySP library
add_subdirectory(DaisySP)

# Link plugin with DaisySP library
function(sc_link_with_daisy plugin_name)
	message(STATUS "Linking ${plugin_name} with DaisySP library")
	if(SCSYNTH)
		include_directories("${plugin_name}_scsynth" DaisySP/Source)
		target_link_libraries("${plugin_name}_scsynth" DaisySP )
	endif()

	if(SUPERNOVA)
		include_directories("${plugin_name}_supernova" DaisySP/Source)
		target_link_libraries("${plugin_name}_supernova" DaisySP )
	endif()
endfunction()

####################################################################################################
# END PLUGIN TARGET DEFINITION
####################################################################################################
# Rongs
set(Rongs_cpp_files
    plugins/Rongs/Rongs.hpp
    plugins/Rongs/Rongs.cpp
)
set(Rongs_sc_files
    plugins/Rongs/Rongs.sc
)
set(Rongs_schelp_files
    plugins/Rongs/Rongs.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"Rongs" # target name
	"${Rongs_cpp_files}"
	"${Rongs_sc_files}"
	"${Rongs_schelp_files}"
)

# DCompressor
set(DCompressor_cpp_files
    plugins/DCompressor/DCompressor.hpp
    plugins/DCompressor/DCompressor.cpp
)
set(DCompressor_sc_files
    plugins/DCompressor/DCompressor.sc
)
set(DCompressor_schelp_files
    plugins/DCompressor/DCompressor.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"DCompressor" # target name
	"${DCompressor_cpp_files}"
	"${DCompressor_sc_files}"
	"${DCompressor_schelp_files}"
)

sc_link_with_daisy("DCompressor")

# BLOsc
set(BLOsc_cpp_files
    plugins/BLOsc/BLOsc.hpp
    plugins/BLOsc/BLOsc.cpp
)
set(BLOsc_sc_files
    plugins/BLOsc/BLOsc.sc
)
set(BLOsc_schelp_files
    plugins/BLOsc/BLOsc.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"BLOsc" # target name
	"${BLOsc_cpp_files}"
	"${BLOsc_sc_files}"
	"${BLOsc_schelp_files}"
)
sc_link_with_daisy("BLOsc")

# HarmonicOsc
set(HarmonicOsc_cpp_files
	plugins/HarmonicOsc/HarmonicOsc.hpp
	plugins/HarmonicOsc/HarmonicOsc.cpp
	)
set(HarmonicOsc_sc_files
	plugins/HarmonicOsc/HarmonicOsc.sc
	)
set(HarmonicOsc_schelp_files
	plugins/HarmonicOsc/HarmonicOsc.schelp
	)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"HarmonicOsc" # target name
	"${HarmonicOsc_cpp_files}"
	"${HarmonicOsc_sc_files}"
	"${HarmonicOsc_schelp_files}"
	)
sc_link_with_daisy("HarmonicOsc")

# OscBank
set(OscBank_cpp_files
    plugins/OscBank/OscBank.hpp
    plugins/OscBank/OscBank.cpp
)
set(OscBank_sc_files
    plugins/OscBank/OscBank.sc
)
set(OscBank_schelp_files
    plugins/OscBank/OscBank.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"OscBank" # target name
	"${OscBank_cpp_files}"
	"${OscBank_sc_files}"
	"${OscBank_schelp_files}"
)
sc_link_with_daisy("OscBank")

# NeoVarSawOsc
set(NeoVarSawOsc_cpp_files
    plugins/NeoVarSawOsc/NeoVarSawOsc.hpp
    plugins/NeoVarSawOsc/NeoVarSawOsc.cpp
)
set(NeoVarSawOsc_sc_files
    plugins/NeoVarSawOsc/NeoVarSawOsc.sc
)
set(NeoVarSawOsc_schelp_files
    plugins/NeoVarSawOsc/NeoVarSawOsc.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"NeoVarSawOsc" # target name
	"${NeoVarSawOsc_cpp_files}"
	"${NeoVarSawOsc_sc_files}"
	"${NeoVarSawOsc_schelp_files}"
)
sc_link_with_daisy("NeoVarSawOsc")

# VarShapeOsc
set(VarShapeOsc_cpp_files
    plugins/VarShapeOsc/VarShapeOsc.hpp
    plugins/VarShapeOsc/VarShapeOsc.cpp
)
set(VarShapeOsc_sc_files
    plugins/VarShapeOsc/VarShapeOsc.sc
)
set(VarShapeOsc_schelp_files
    plugins/VarShapeOsc/VarShapeOsc.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"VarShapeOsc" # target name
	"${VarShapeOsc_cpp_files}"
	"${VarShapeOsc_sc_files}"
	"${VarShapeOsc_schelp_files}"
)
sc_link_with_daisy("VarShapeOsc")

# VosimOsc
set(VosimOsc_cpp_files
    plugins/VosimOsc/VosimOsc.hpp
    plugins/VosimOsc/VosimOsc.cpp
)
set(VosimOsc_sc_files
    plugins/VosimOsc/VosimOsc.sc
)
set(VosimOsc_schelp_files
    plugins/VosimOsc/VosimOsc.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"VosimOsc" # target name
	"${VosimOsc_cpp_files}"
	"${VosimOsc_sc_files}"
	"${VosimOsc_schelp_files}"
)

sc_link_with_daisy("VosimOsc")

# ZOsc
set(ZOsc_cpp_files
    plugins/ZOsc/ZOsc.hpp
    plugins/ZOsc/ZOsc.cpp
)
set(ZOsc_sc_files
    plugins/ZOsc/ZOsc.sc
)
set(ZOsc_schelp_files
    plugins/ZOsc/ZOsc.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"ZOsc" # target name
	"${ZOsc_cpp_files}"
	"${ZOsc_sc_files}"
	"${ZOsc_schelp_files}"
)
sc_link_with_daisy("ZOsc")

# AnalogBassDrum
set(AnalogBassDrum_cpp_files
    plugins/AnalogBassDrum/AnalogBassDrum.hpp
    plugins/AnalogBassDrum/AnalogBassDrum.cpp
)
set(AnalogBassDrum_sc_files
    plugins/AnalogBassDrum/AnalogBassDrum.sc
)
set(AnalogBassDrum_schelp_files
    plugins/AnalogBassDrum/AnalogBassDrum.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"AnalogBassDrum" # target name
	"${AnalogBassDrum_cpp_files}"
	"${AnalogBassDrum_sc_files}"
	"${AnalogBassDrum_schelp_files}"
)
sc_link_with_daisy("AnalogBassDrum")

# AnalogSnareDrum
set(AnalogSnareDrum_cpp_files
    plugins/AnalogSnareDrum/AnalogSnareDrum.hpp
    plugins/AnalogSnareDrum/AnalogSnareDrum.cpp
)
set(AnalogSnareDrum_sc_files
    plugins/AnalogSnareDrum/AnalogSnareDrum.sc
)
set(AnalogSnareDrum_schelp_files
    plugins/AnalogSnareDrum/AnalogSnareDrum.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"AnalogSnareDrum" # target name
	"${AnalogSnareDrum_cpp_files}"
	"${AnalogSnareDrum_sc_files}"
	"${AnalogSnareDrum_schelp_files}"
)
sc_link_with_daisy("AnalogSnareDrum")
# StringVoice
set(StringVoice_cpp_files
    plugins/StringVoice/StringVoice.hpp
    plugins/StringVoice/StringVoice.cpp
)
set(StringVoice_sc_files
    plugins/StringVoice/StringVoice.sc
)
set(StringVoice_schelp_files
    plugins/StringVoice/StringVoice.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"StringVoice" # target name
	"${StringVoice_cpp_files}"
	"${StringVoice_sc_files}"
	"${StringVoice_schelp_files}"
)
sc_link_with_daisy("StringVoice")


# NeoFormant
set(NeoFormant_cpp_files
    plugins/NeoFormant/NeoFormant.hpp
    plugins/NeoFormant/NeoFormant.cpp
)
set(NeoFormant_sc_files
    plugins/NeoFormant/NeoFormant.sc
)
set(NeoFormant_schelp_files
    plugins/NeoFormant/NeoFormant.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"NeoFormant" # target name
	"${NeoFormant_cpp_files}"
	"${NeoFormant_sc_files}"
	"${NeoFormant_schelp_files}"
)
sc_link_with_daisy("NeoFormant")

# Resonator
set(Resonator_cpp_files
    plugins/Resonator/Resonator.hpp
    plugins/Resonator/Resonator.cpp
)
set(Resonator_sc_files
    plugins/Resonator/Resonator.sc
)
set(Resonator_schelp_files
    plugins/Resonator/Resonator.schelp
)

sc_add_server_plugin(
	"${project_name}" # destination directory
	"Resonator" # target name
	"${Resonator_cpp_files}"
	"${Resonator_sc_files}"
	"${Resonator_schelp_files}"
)
sc_link_with_daisy("Resonator")

