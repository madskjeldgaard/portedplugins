CLASS:: Rongs
SUMMARY:: A modal synthesis voice
RELATED::HelpSource/Overview/PortedPlugins
CATEGORIES::UGens>PhysicalModelling

DESCRIPTION::

A modal synthesis voice spanning sonic territory from tired spring reverb, plastic tubes to string plucking and percussion.

This implementation has up to 512 modes (as opposed to 64 in Mutable Instruments Rings/Elements and 24 in Plaits) which widens the sonic potential quite substantially (and the CPU usage as well).

It is a Frankenstein of code from LINK::https://mutable-instruments.net/##Mutable Instruments::' modal synthesis modules, based mostly on the simple version in Plaits but incorporating elements from the others while adding parameters not found in either of them.

It utilizes some high precision settings that were available in Mutable Instruments' code but not used in the production models it seems, these add a lot of extra depth to the sound (and, again, CPU usage).

CLASSMETHODS::

METHOD::ar

ARGUMENT::trigger
Trigger the resonator

ARGUMENT::sustain
A trigger/gate input to keep the resonator open (feeding it crackling noise)

ARGUMENT::f0
The base scale for the frequency expressed in herz. This is sort of arbitrary and will be scaled by amount of modes and a combination of the other parameters.

ARGUMENT::structure
Harmonic structure. Sets the ratio between partials and thus the perception of what kind of material it is.

Values should be between 0.0 and 1.0.

ARGUMENT::brightness

Increasing the value increases amount of high harmonics and decreases the attack on the exciter.

Values should be between 0.0 and 1.0.

ARGUMENT::damping
Amount of decay time for the exciter.

Values should be between 0.0 and 1.0.

ARGUMENT::accent
The pluck/hit accent.

Values should be between 0.0 and 1.0.

ARGUMENT::stretch
Stretch of the harmonics.

Values should be between 0.0 and 1.0.

ARGUMENT::position
Position of exciter.

Values should be between 0.0 and 1.0.

ARGUMENT::loss
Values should be between 0.0 and 1.0.

ARGUMENT::modeNum
An integer between 0 and 5 setting the processing mode, from the lowest (and cheapest on the CPU) amount of modes to the highest. This argument is set at init.

table::
    ## modeNum || number of modes
    ## 0 || 16
    ## 1 || 32
	## 2 || 64
	## 3 || 128
	## 4 || 256
	## 5 || 512

::

ARGUMENT::cosFreq
The bandpass filters' amplitudes are scaled using values generated on init using a cosine generator. This argument sets the frequency of that. It has some sort of esoteric influence on the sound but I'm not sure what it does exactly. Anyway, it's open to exploration.

This argument is set at init.

EXAMPLES::

code::
(
Ndef(\c, {|pan=0.0, trigfreq=4|
	var trig = Dust2.kr(trigfreq);

	var sig = Rongs.ar(
		trig,
		sustain: trig,
		f0: TExpRand.kr(50.0,500.0, trig),
		structure: TRand.kr(0.0,0.99,trig),
		brightness: TRand.kr(0.6,0.99,trig),
		stretch: TRand.kr(0.1,0.99,trig),
		damping: 0.5,
		//damping: TRand.kr(0.5,0.85, trig),
		accent: 0.99,
		loss: 0.1
	);

	Splay.ar(LeakDC.ar(sig), spread: 0.25, center: pan);
}).play;
)

// Want more mayhem?
(

Ndef(\c).copy(\c2).set(\pan, 0.285).play;
Ndef(\c).copy(\c3).set(\pan, (-0.2855285)).play;
)

// A synth def
(
SynthDef.new(\rongsinator, {|out, amp=0.25, pan=0, sustainTime=0.01, f0=100.05, structure=0.5, brightness=0.5, damping=0.75, accent=0.9, harmonicstretch=0.5, position=0.15, loss=0.15|
	var trig = Trig.kr(1, dur: sustainTime);

	var modeNum=2, cosFreq=0.025;
	var sig = Rongs.ar(
		trigger:trig,
		sustain:trig,
		f0:f0,
		structure:structure,
		brightness:brightness,
		damping:damping,
		accent:accent,
		stretch:harmonicstretch,
		position:position,
		loss:loss,
		modeNum:modeNum,
		cosFreq:cosFreq
	);

	DetectSilence.ar(in: sig, amp: 0.0001, time: 0.1, doneAction: 2);
	sig = Pan2.ar(sig, pan);
	Out.ar(out, sig);
}).add;
)

// Trig it once
Synth(\rongsinator, [\damping, 0.5])

// Play pattern
(
Pdef('ðŸŒ»',
	Pbind(
		\instrument, \rongsinator,
		\amp, 0.20,
		\pan, Pwhite(-1.0,1.0),
		\f0, Pwhite(100,500),
		\dur, 0.125,
		\structure, Pseg([0.1,1.0], 5, \lin, inf),
		\brightness, 0.5,
		\damping, Pseg([0.65,0.30], 13, \lin, inf),
		\accent, 0.69,
		\harmonicstretch, 0.0151,
		\position, Pseg([0.6,0.0], 8, \lin, inf),
		\loss, 0.15,
		\modeNum, 3,
		\cosFreq, 0.15,
	)
).play
)
::
